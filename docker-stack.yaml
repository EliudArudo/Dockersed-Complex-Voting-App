version: '3'
services:
  nginx:
    image: eliudarudo/complex-voting-app-nginx
    ports:
      - "80:80"
    networks:
      - frontend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure  
        
  voter:
    image: eliudarudo/complex-voting-app-voter
    networks:
      - frontend
    ports:
      - "3000"
    depends_on:
      - manager
      - wsserver
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure 
  admin:
    image: eliudarudo/complex-voting-app-admin
    networks:
      - frontend
    ports:
      - "3001"
    depends_on:
      - manager
      - wsserver
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure  
  results:
    image: eliudarudo/complex-voting-app-results
    networks:
      - frontend
    ports:
      - "3002"
    depends_on:
      - wsserver    
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure  

  wsserver:
    image: eliudarudo/complex-voting-app-wsserver
    networks:
        - frontend
    ports:
        - "3003"
    depends_on:
        - manager
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure  
    environment:
      - MANAGER=manager
  manager:
    image: eliudarudo/complex-voting-app-manager
    networks:
        - backend
        - frontend
    ports:
        - "3004"
    depends_on:
        - redis
        - wsserver
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
    env_file: ./env/manager.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WSSERVER=wsserver  

  worker:
    image: eliudarudo/complex-voting-app-worker
    networks:
      - backend
    depends_on:
      - redis
      - mongodb
      - postgres
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure  
    env_file: ./env/worker.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb
      - MONGO_PORT=27017
      - PGHOST=postgres
      - PGPORT=5432  

  mongodb:
    image: mongo:latest
    networks:
      - backend
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017"
  redis:
    image: redis:alpine
    networks:
      - backend
    ports:
      - "6379"
  postgres:
    image: postgres:latest
    env_file: ./env/postgres.env
    networks:
      - backend
    volumes:
      - postgres-data:/data/db
    ports:
      - "5432"

networks:
  frontend:
  backend:

volumes:
  postgres-data:
  mongodb-data:
